{"version":3,"sources":["Todos.js","AddTodo.js","App.js","serviceWorker.js","index.js"],"names":["Todos","todos","deleteTodo","todoList","length","map","todo","className","key","id","onClick","content","AddTodo","state","handleChange","e","setState","target","value","handleSubmit","preventDefault","props","addTodo","onSubmit","this","htmlFor","type","onChange","Component","App","Math","random","filter","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"wPA0BeA,EAvBD,SAAC,GAAyB,IAAxBC,EAAuB,EAAvBA,MAAOC,EAAgB,EAAhBA,WAEfC,EAAWF,EAAMG,OACrBH,EAAMI,KAAI,SAAAC,GACR,OACE,yBAAKC,UAAU,uBAAuBC,IAAKF,EAAKG,GAAIC,QAAS,kBAAMR,EAAWI,EAAKG,MAEjF,8BAAOH,EAAKK,aAKlB,uBAAGJ,UAAU,UAAb,oBAIF,OACE,yBAAKA,UAAU,oBACZJ,ICqBQS,E,2MArCbC,MAAQ,CACNF,QAAS,I,EAGXG,aAAe,SAAAC,GACb,EAAKC,SAAS,CACZL,QAASI,EAAEE,OAAOC,S,EAItBC,aAAe,SAAAJ,GAEbA,EAAEK,iBAEF,EAAKC,MAAMC,QAAQ,EAAKT,OACxB,EAAKG,SAAS,CACZL,QAAS,M,wEAKX,OACE,6BACE,0BAAMY,SAAUC,KAAKL,cACnB,2BAAOM,QAAQ,SAAf,iBACA,2BACEhB,GAAG,QACHiB,KAAK,OACLC,SAAUH,KAAKV,aACfI,MAAOM,KAAKX,MAAMF,gB,GA9BRiB,aC+CPC,G,iNA5CbhB,MAAQ,CACNZ,MAAO,CACL,CAACQ,GAAI,EAAGE,QAAS,YACjB,CAACF,GAAI,EAAGE,QAAS,YACjB,CAACF,GAAI,EAAGE,QAAS,qB,EAKrBW,QAAU,SAAAhB,GAERA,EAAKG,GAAKqB,KAAKC,SAEf,IAAI9B,EAAK,sBAAO,EAAKY,MAAMZ,OAAlB,CAAyBK,IAClC,EAAKU,SAAS,CACZf,W,EAIJC,WAAa,SAAAO,GAEX,IAAMR,EAAQ,EAAKY,MAAMZ,MAAM+B,QAAO,SAAA1B,GACpC,OAAOA,EAAKG,KAAOA,KAGrB,EAAKO,SAAS,CACZf,W,wEAKF,OAEE,yBAAKM,UAAU,aACb,wBAAIA,UAAU,oBAAd,SACA,kBAAC,EAAD,CAASe,QAASE,KAAKF,UAEvB,yBAAKf,UAAU,oBACf,kBAAC,EAAD,CAAON,MAAOuB,KAAKX,MAAMZ,MAAOC,WAAYsB,KAAKtB,kB,GAxCvC0B,cCOEK,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.a20d35c2.chunk.js","sourcesContent":["import React from 'react';\r\n\r\n// Stateless function component since not managing state\r\nconst Todos = ({todos, deleteTodo}) => {\r\n\r\n  const todoList = todos.length ? (\r\n    todos.map(todo => {\r\n      return (\r\n        <div className=\"collection-item todo\" key={todo.id} onClick={() => deleteTodo(todo.id)}>\r\n          {/* Passing arrow function to onClick so don't need to bind, i.e., onClick={deleteTodo.bind(this, todo.id)}, which would create a new function with a predefined first parameter, todo.id. This is needed so that when deleteTodo is called, it knows where todo.id is coming from */}\r\n          <span>{todo.content}</span>\r\n        </div>\r\n      );\r\n    })\r\n  ) : (\r\n    <p className=\"center\">You're all done!</p>\r\n  );\r\n\r\n  // collection is a Materialize class\r\n  return (\r\n    <div className=\"todos collection\">\r\n      {todoList}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Todos;","import React, { Component } from 'react';\r\n\r\n// Class component since need local state to store what user types into input field (and not using Hooks)\r\n\r\nclass AddTodo extends Component {\r\n  state = {\r\n    content: ''\r\n  }\r\n\r\n  handleChange = e => {\r\n    this.setState({\r\n      content: e.target.value\r\n    });\r\n  }\r\n\r\n  handleSubmit = e => {\r\n    // Prevents default action of form being submitted, which is to refresh the page\r\n    e.preventDefault();\r\n    // Reminder: You automatically get props in class-based components. Since addTodo method on parent component is passed as a prop, it's available in this one\r\n    this.props.addTodo(this.state);\r\n    this.setState({\r\n      content: ''\r\n    });\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <form onSubmit={this.handleSubmit}>\r\n          <label htmlFor=\"input\">Add new todo:</label>\r\n          <input\r\n            id=\"input\"\r\n            type=\"text\"\r\n            onChange={this.handleChange}\r\n            value={this.state.content}\r\n          />\r\n        </form>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default AddTodo;","import React, { Component } from 'react';\nimport Todos from './Todos';\nimport AddTodo from './AddTodo';\nimport './App.css';\n\nclass App extends Component {\n  // This is alternative class component syntax - class field declaration, allows you to initialize local state without using the constructor and declare class methods by using arrow functions without the extra need to bind them. See https://github.com/the-road-to-learn-react/react-alternative-class-component-syntax and https://www.robinwieruch.de/react-state-without-constructor\n  state = {\n    todos: [\n      {id: 1, content: 'Buy milk'},\n      {id: 2, content: 'Call mom'},\n      {id: 3, content: 'Pick up package'}\n    ]\n  }\n\n  // todo passed in as state from handleSubmit method in child AddTodo component\n  addTodo = todo => {\n    // Attaching ID because each item iterated over needs unique key. Math.random() returns (pseudo)random number between 0 (inclusive) and 1 (exclusive)\n    todo.id = Math.random();\n    // Creating new array, and inside that array, dumping contents of todos state using spread syntax and including newly added todo\n    let todos = [...this.state.todos, todo];\n    this.setState({\n      todos\n    });\n  }\n\n  deleteTodo = id => {\n    // filter() method creates a new array with all elements that pass the test implemented by the provided function\n    const todos = this.state.todos.filter(todo => {\n      return todo.id !== id;\n    });\n    // Using destructuring here; when key and value are same, can just put todos instead of todos: todos\n    this.setState({\n      todos\n    });\n  }\n\n  render() {\n    return (\n      // Materialize CSS container class used to contain body content, sets to ~70% of window width\n      <div className=\"container\">\n        <h1 className=\"center blue-text\">Todos</h1>\n        <AddTodo addTodo={this.addTodo} />\n        {/* Can't target a component with a class and add a margin, so this is a workaround to add some spacing between AddTodo and Todos components */}\n        <div className=\"spacing-between\" />\n        <Todos todos={this.state.todos} deleteTodo={this.deleteTodo} />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}